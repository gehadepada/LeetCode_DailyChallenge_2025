#include<bits/stdc++.h>
#define endl "\n"
#define ll long long
#define unll unsigned long long
#define pb push_back
#define pp pop_back
#define sz(s) s.size()
#define yes cout << "YES\n"
#define no cout << "NO\n"
#define f first
#define s second
#define mod 1000000007

using namespace std;

class Solution {
public:
    int mostBooked(int n, vector<vector<int>>& meetings) {

        sort(meetings);
        
        multiset<pair<ll, ll>> v;  // {end_time, room_id}
        map<ll, ll> m;             // room_id -> count
        ll duration = 0;
        ll ans = 0;
        
    
        // Your approach: process meetings one by one
        for(ll i = 0; i < sz(meetings); i++) {
            duration = meetings[i][1] - meetings[i][0];
            
            // Free up rooms that finished before this meeting starts
            while(!v.empty() && v.begin()->f <= meetings[i][0]) {
                v.erase(v.begin());
            }
            
            if(v.size() < n) {
                // Some rooms are available, find the lowest numbered free room
                set<ll> busy_rooms;
                for(auto& p : v) {
                    busy_rooms.insert(p.s);
                }
                
                ll room_to_use = 0;
                for(ll j = 0; j < n; j++) {
                    if(busy_rooms.find(j) == busy_rooms.end()) {
                        room_to_use = j;
                        break;
                    }
                }
                
                v.insert({meetings[i][1], room_to_use});
                m[room_to_use]++;
            } else {
                // All rooms busy
                auto first = *(v.begin());
                v.erase(v.begin());
                v.insert({first.f + duration, first.s});
                m[first.s]++;
            }
        }
        
        // Find room with most meetings 
        ll maxi = 0;
        for(auto& p : m) {
            if(p.second > maxi) {
                maxi = p.second;
                ans = p.first;
            }
        }
        
        return ans;
    }
};
